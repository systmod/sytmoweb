// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using DataAccess.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace DataAccess.Repositories
{
    public partial class benderbrauContext
    {
        private IbenderbrauContextProcedures _procedures;

        public virtual IbenderbrauContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new benderbrauContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IbenderbrauContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CarritoToProforResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Custom_SecuencialResult>().HasNoKey().ToView(null);
        }
    }

    public partial class benderbrauContextProcedures : IbenderbrauContextProcedures
    {
        private readonly benderbrauContext _context;

        public benderbrauContextProcedures(benderbrauContext context)
        {
            _context = context;
        }

        public virtual async Task<List<CarritoToProforResult>> CarritoToProforAsync(int? IdUsuario, string Bodega, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdUsuario",
                    Value = IdUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Bodega",
                    Size = 3,
                    Value = Bodega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CarritoToProforResult>("EXEC @returnValue = [dbo].[CarritoToProfor] @IdUsuario, @Bodega", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_SecuencialResult>> Custom_SecuencialAsync(int? IdEmpresa, string xTipo, string xModulo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "xTipo",
                    Size = 2,
                    Value = xTipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "xModulo",
                    Size = 2,
                    Value = xModulo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_SecuencialResult>("EXEC @returnValue = [dbo].[Custom_Secuencial] @IdEmpresa, @xTipo, @xModulo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
